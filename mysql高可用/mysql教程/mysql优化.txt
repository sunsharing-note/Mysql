1、建表详解
	可以修改某个表主键的自增初始值：alter table 表名 auto_increment=值;
	自增只能用在证书类型上；show warnings;可以查看之前的错误。
2、数据类型（上）
	? data types;可以查看当前mysql版本支持的数据类型。
	？types;可以查看该“types”的具体类型和范围等信息等。
	2/1 存储一个IP地址
		1、存储为一个整数“192168187133”，然后我们解析的时候每三位加一个点，我们只需要不断的模1000就可以了，
			它使用bigint,占据8个字节。
		2、存储为一个字符串，也就是“192.168.187.133”，不论是char还是varchar，占据的都是7到15个字节不等，
			基本不用解析
		3、ip地址的每一个数据都可以转化为两个16进制数，于是ip存储为delf200a，需要8个字节。(伪16进制)
		4、IP地址存储为3726516234即可，怎么来的？它是192*256*256*256+168*256*256+32*256+10计算得到的，
			转化为ip地址的时候通过取模和商即可，它需要int类型，占据4个字节。(伪256进制)
	综上所述，最好存储为int类型，存储为unsigned，也就是不包含负数。
	建表：create table ips(ip int unsigned);
	添加数据：insert into ips values(inet_aton('192.168.187.133'));
	inet_aton函数负责把ip地址转换为整数。
	最后结果为：3232283525
	解析该整数：select inet_ntoa(ip) from ips;
	inet_ntoa函数负责把整数变为Ip地址。
数值类型：整数类型和浮点数类型。
	tinyint 1字节
	smallint 2字节
	mediumint 3字节
	int(integer) 4字节
	bigint 8字节
	每一个类型都可以通过unsigned修饰为无符号数(无正负之分)，默认是有符号数
	如果使用了zerofill就意味着它是无符号数据。如果长度不够，用0来补充，而不是空格；否则就用空格补充。
  浮点数：float 固定的4字节 浮点类型
		  double 固定的8字节 浮点类型
  定点数：decimal decimal(M,D)由M和D决定 定点类型
	浮点类型存储数据会存在一定的误差。建议使用点点类型。
  对于decimal
	decimal(M,D),M称为精度，D称为标度。如果M>D,就是M+2个字节;否则就是D+2个字节。
	定点数是以字符串的形式存储数据的，所以更加准确。
字符串类型：
	char 定长字符串 0~255 长度不足用空格不足，长度超过会被截断 可加快检索速度
	varchar 可变长字符串 实际长度，长度超过还是会被截断 可节省存储空间
Mysql的一个规定：在保存的时候由于使用了空格来填充位数不够的字符串，因此在检索数据的时候，数据会被去掉尾部的空格。
	text 文本方式存储
	blob 二进制方式存储
	分tinytext和tinyblob,0~255
	text和blob 0~65535
	mediumtext和mediumblob 0~16777215
	longtext和longblob 0~4294967295
3、数据类型(下)、
	year 1个字节 yyyy 存储年份
	date 3个字节 yyyy-mm-dd 存储日期
	time 3个字节 hh:mm:ss 时间点(段) 从后往前解析
	datetime 8个字节 yyyy-mm-dd hh:mm:ss 日期和时间
	timestamp 4个字节 yyyy-mm-dd hh:mm:ss 日期和时间
	timestamp:表示的是Unix时间戳，无法表示时间小于1970年的时间，使用四个字节存储，以UTC格式存储，会检索当前时区。
	向timestamp中插入null,会默认插入当前时间戳。支持时间范围小，1970~2038
	datetime使用8个字节存储，不会检索当前时区。插入null就是null。支持时间范围大 1000~9999
	now()内置函数
	show variables like '%time_zone%';查看当前时区。
4、符合类型
	enum 从一个集合中去取一个值或者空值 0~65535 1~255 一个字节 255~65535 2个字节
	set 从一个集合中取多个值
	regexp：正则表达式
	set存储机制：
	set('a','b','c','d','e')
	集合元素   二进制表示  十进制表示
	a           00001       1
	b 			00010		2
	c 			00100		4
	d 			01000       8
	e    		10000 		16
	x&5则可以检索出带'a'和'c'的数据，将会拿x的标志位与00101比较，这里是位操作，两者都是1，则改位为1，
	只要有一个为0，则改位为0.
5、范式
	范式就是符合某一种级别的关系模式的集合。共有六种范式：第一范式、第二范式、第三范式、BC范式、第四范式、第五范式
	BC范式：BC--->Boyce-Codd范式，也就是巴斯-科德范式。一般数据库只要遵守到第三范式或者BC范式即可。
	第五范式也称为完美范式。
	第一范式：数据表的每一列都是不可分割的基本数据项，同一列中不能有多个值。
	第二范式：数据表中的每个实例或行必须可以被唯一的区分。通常为表加上一列，来存储为各个记录的唯一标识，即主键。
	第二范式必须满足第一范式。
	第三范式：任何非主属性不依赖与其他非主属性。也必须满足于第二范式。
	BC范式：数据库表中不存在任何字段对任意候选关键字的传递依赖。
 范式好处：1、范式化的更新操作通常比范式化要快
			2、范式化的表通常更小，可以更好的加载到内存中，所以执行会比较快
			3、由于很少有冗余数据，因此我们基本不需要使用distinct或者group by语句。
6、反范式
	反范式的存在是为了弥补范式的一些不足。
	一般技术有：
				增加冗余列、增加派生列、重新租表和分割表
				增加冗余列：多个表中有相同的列，常用来查询时避免连接操作。
				增加派生列：增加的列来自其他表中的数据，由其他表中的数据经过计算生成。作用就是在查询时减少连接操作。
				重组表：如果许多用户需要查看两个表连接出来的结果数据，则把这两个表重新组成一个表来减少连接而提高性能。
				分割表：通常是对表进行切分，通常又可以分为水平切分和垂直切分。
7、数据建模
	使用MySQL Workbench进行建模，小型快捷。
8、数据库优化
	1、开启慢查询日志。
		在mysql的my.cnf文件中添加“log_show_queries=slow.log"、”long_query_time=2"即可
		show variables like ‘log_show_queries’;
	2、使用explain查看执行计划
	3、合理使用索引
	4、语句优化
	
	type:system 系统表：表中只有一行记录;const:表中最多只有一行匹配的记录。
	eq_ref:该表只能够会有一行记录被读取出来来和从前一个表中读取出来的记录做联合，他是最好的连接类型，使用唯一索引或主键索引。
	ref:该表中符合检索值得记录都会被取出来和才能够上个表中取出来的记录做联合，与eq_ref的区别是不使用唯一索引或主键索引。
	ref_or_null：类似于ref，但是Mysql会在检索的时候额外的搜索包含null值的记录。
	unique_subquery:使用唯一索引的子查询。
	index_subquery:使用....子查询
	range:在给定范围内查找一些记录，可利用索引。
	index：可利用索引，但是只是扫描索引树，比权标扫描要好一些。
	all:最慢的扫描方法，也就是全表扫描。
9、mysql如何权衡算法？
	使用“代价”：show status like '%cost%';
	select @@profiling;查看某一条sql的执行情况。默认是关闭的。0为关闭，1为开启。
	 show profiles;查询具体进行了那些操作。
	show profile for query 1;查看具体某一个操作的情况。
10、索引
	可以理解为一本书的目录。
	分为：B-Tree索引、哈希索引、数据空间索引(R-Tree)、全文索引等等
	如果没有特殊说明，一般的索引值得是B-Tree索引。索引是在存储引擎层实现的，不是在服务器层实现的。
 10/1 索引可分为：普通索引、唯一索引、主键索引。
	创建索引：create index 索引名 [索引类型] on 表名(列名列表)，无法创建主键索引。
	创建唯一索引：create unique index 索引名 on 表名(列名列表)
	或者：alter table add index(列名列表)
	查看某个表的索引：show index from 表名;
	分析表： analyze table 表名：
	查看表信息：show table status from 数据库名。
 10/2 关于锁表和解锁
	解锁：unlock tables;或者：show processlist; kill id;
	锁表：lock tables 表名 read/write;
  10/3 碎片处理
	optimize table 表名;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	